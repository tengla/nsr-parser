// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trainroute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperatingTrainRouteServiceClient is the client API for OperatingTrainRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatingTrainRouteServiceClient interface {
	FullState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OtrIdList, error)
	GetItems(ctx context.Context, in *OtrIdList, opts ...grpc.CallOption) (*OperatingTrainRouteList, error)
}

type operatingTrainRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatingTrainRouteServiceClient(cc grpc.ClientConnInterface) OperatingTrainRouteServiceClient {
	return &operatingTrainRouteServiceClient{cc}
}

func (c *operatingTrainRouteServiceClient) FullState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OtrIdList, error) {
	out := new(OtrIdList)
	err := c.cc.Invoke(ctx, "/OperatingTrainRouteService/FullState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatingTrainRouteServiceClient) GetItems(ctx context.Context, in *OtrIdList, opts ...grpc.CallOption) (*OperatingTrainRouteList, error) {
	out := new(OperatingTrainRouteList)
	err := c.cc.Invoke(ctx, "/OperatingTrainRouteService/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatingTrainRouteServiceServer is the server API for OperatingTrainRouteService service.
// All implementations must embed UnimplementedOperatingTrainRouteServiceServer
// for forward compatibility
type OperatingTrainRouteServiceServer interface {
	FullState(context.Context, *Empty) (*OtrIdList, error)
	GetItems(context.Context, *OtrIdList) (*OperatingTrainRouteList, error)
	mustEmbedUnimplementedOperatingTrainRouteServiceServer()
}

// UnimplementedOperatingTrainRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOperatingTrainRouteServiceServer struct {
}

func (UnimplementedOperatingTrainRouteServiceServer) FullState(context.Context, *Empty) (*OtrIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullState not implemented")
}
func (UnimplementedOperatingTrainRouteServiceServer) GetItems(context.Context, *OtrIdList) (*OperatingTrainRouteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedOperatingTrainRouteServiceServer) mustEmbedUnimplementedOperatingTrainRouteServiceServer() {
}

// UnsafeOperatingTrainRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatingTrainRouteServiceServer will
// result in compilation errors.
type UnsafeOperatingTrainRouteServiceServer interface {
	mustEmbedUnimplementedOperatingTrainRouteServiceServer()
}

func RegisterOperatingTrainRouteServiceServer(s grpc.ServiceRegistrar, srv OperatingTrainRouteServiceServer) {
	s.RegisterService(&OperatingTrainRouteService_ServiceDesc, srv)
}

func _OperatingTrainRouteService_FullState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingTrainRouteServiceServer).FullState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OperatingTrainRouteService/FullState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingTrainRouteServiceServer).FullState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatingTrainRouteService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtrIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingTrainRouteServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OperatingTrainRouteService/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingTrainRouteServiceServer).GetItems(ctx, req.(*OtrIdList))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatingTrainRouteService_ServiceDesc is the grpc.ServiceDesc for OperatingTrainRouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatingTrainRouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OperatingTrainRouteService",
	HandlerType: (*OperatingTrainRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FullState",
			Handler:    _OperatingTrainRouteService_FullState_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _OperatingTrainRouteService_GetItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainroute/protos/trainroute.proto",
}
